# %%
import random
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

def my_rand1(n): 
    rand_list=[]
    for i in range(n):
        rand_list.append(random.randint(3,9))
    print(rand_list)

def my_rand2(n):
    res = random.sample(range(1, 6), n)
    print ("Random number list is : " +  str(res)) 

def my_rand3(n):
    res = [random.randrange(1, 50, 1) for i in range(n)]
    print ("Random number list is : " + str(res))

def my_rand4(n):
    lis = []
    for _ in range(n):
        lis.append(random.randint(0, 51))
    print(lis)

def my_rand5(n):
    print(list(np.random.randint(low = 3,high=8,size=n))) 

def my_rand6(n):
    print(np.random.random_sample(size = n))

# %%
def kubik(n: int) -> list:
    data = []
    while len(data) <n:
        data.append(random.randint(1,6))
    return data

def count_rate(kub_data: list):
    kub_rate = {}
    for i in kub_data:
        if i in kub_rate:
            continue
        else:
            kub_rate[i] = kub_data.count(i)
    for i in range(1, 7):
        if i not in kub_rate:
            kub_rate[i] = 0
    return kub_rate


def sort_rate(counted_rate: dict):
    sorted_rate = {}
    for key in sorted(counted_rate.keys()):
        sorted_rate[key] = counted_rate[key]
    return sorted_rate


def crate_dataframe(sorted_date: dict):
    df = pd.DataFrame(sorted_date, index=[0])
    df = df.T
    df = df.rename(columns={0: 'Частота'})
    df.insert(0, 'Количество выпаданий', range(1, 1 + len(df)))
    return df

def probability_solving(dataframe: pd.DataFrame):
    sum_rate = dataframe['Частота'].sum()
    probability = []
    for i in dataframe['Частота']:
        probability.append(i / sum_rate)
    dataframe['Вероятность'] = probability
    return dataframe

# %%
kubik_l = kubik(100)
print(kubik_l)
cr = count_rate(kubik_l)
print(cr)
sr = sort_rate(cr)
print(sr)
cdf = crate_dataframe(sr)
print(cdf)
ps = probability_solving(cdf)
print(ps)

# %%
kubik_ll = kubik(10000)
print(kubik_ll)
crl = count_rate(kubik_l)
print(crl)
srl = sort_rate(crl)
print(srl)
cdfl = crate_dataframe(srl)
print(cdfl)
psl = probability_solving(cdfl)
print(psl)

# %%
kubik_lll = kubik(1000000)
print(kubik_lll)
crll = count_rate(kubik_ll)
print(crll)
srll = sort_rate(crll)
print(srll)
cdfll = crate_dataframe(srll)
print(cdfll)
psll = probability_solving(cdfll)
print(psll)

# %%
a = ps.plot(kind='bar', legend=True)

# %%
a = psl.plot(kind='bar', legend=True)

# %%
a = psll.plot(kind='bar', legend=True)

# %%


# %%



